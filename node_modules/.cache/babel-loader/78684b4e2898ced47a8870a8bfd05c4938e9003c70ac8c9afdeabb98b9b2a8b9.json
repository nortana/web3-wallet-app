{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar index_1 = __importDefault(require(\"./index\"));\nvar hdkey_1 = require(\"ethereum-cryptography/hdkey\");\nvar EthereumHDKey = /** @class */function () {\n  function EthereumHDKey(_hdkey) {\n    this._hdkey = _hdkey;\n  }\n  /**\n   * Creates an instance based on a seed.\n   *\n   * For the seed we suggest to use [bip39](https://npmjs.org/package/bip39) to\n   * create one from a BIP39 mnemonic.\n   */\n  EthereumHDKey.fromMasterSeed = function (seedBuffer) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromMasterSeed(seedBuffer));\n  };\n  /**\n   * Create an instance based on a BIP32 extended private or public key.\n   */\n  EthereumHDKey.fromExtendedKey = function (base58Key) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromExtendedKey(base58Key));\n  };\n  /**\n   * Returns a BIP32 extended private key (xprv)\n   */\n  EthereumHDKey.prototype.privateExtendedKey = function () {\n    if (!this._hdkey.privateExtendedKey) {\n      throw new Error('This is a public key only wallet');\n    }\n    return this._hdkey.privateExtendedKey;\n  };\n  /**\n   * Return a BIP32 extended public key (xpub)\n   */\n  EthereumHDKey.prototype.publicExtendedKey = function () {\n    return this._hdkey.publicExtendedKey;\n  };\n  /**\n   * Derives a node based on a path (e.g. m/44'/0'/0/1)\n   */\n  EthereumHDKey.prototype.derivePath = function (path) {\n    return new EthereumHDKey(this._hdkey.derive(path));\n  };\n  /**\n   * Derive a node based on a child index\n   */\n  EthereumHDKey.prototype.deriveChild = function (index) {\n    return new EthereumHDKey(this._hdkey.deriveChild(index));\n  };\n  /**\n   * Return a `Wallet` instance as seen above\n   */\n  EthereumHDKey.prototype.getWallet = function () {\n    if (this._hdkey._privateKey) {\n      return index_1.default.fromPrivateKey(this._hdkey._privateKey);\n    }\n    return index_1.default.fromPublicKey(this._hdkey._publicKey, true);\n  };\n  return EthereumHDKey;\n}();\nexports.default = EthereumHDKey;","map":{"version":3,"names":["index_1","__importDefault","require","hdkey_1","EthereumHDKey","_hdkey","fromMasterSeed","seedBuffer","HDKey","fromExtendedKey","base58Key","prototype","privateExtendedKey","Error","publicExtendedKey","derivePath","path","derive","deriveChild","index","getWallet","_privateKey","default","fromPrivateKey","fromPublicKey","_publicKey"],"sources":["../src/hdkey.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,IAAAC,OAAA,GAAAD,OAAA;AAEA,IAAAE,aAAA;EAkBE,SAAAA,cAA6BC,MAAY;IAAZ,KAAAA,MAAM,GAANA,MAAM;EAAS;EAjB5C;;;;;;EAMcD,aAAA,CAAAE,cAAc,GAA5B,UAA6BC,UAAkB;IAC7C,OAAO,IAAIH,aAAa,CAACD,OAAA,CAAAK,KAAK,CAACF,cAAc,CAACC,UAAU,CAAC,CAAC;EAC5D,CAAC;EAED;;;EAGcH,aAAA,CAAAK,eAAe,GAA7B,UAA8BC,SAAiB;IAC7C,OAAO,IAAIN,aAAa,CAACD,OAAA,CAAAK,KAAK,CAACC,eAAe,CAACC,SAAS,CAAC,CAAC;EAC5D,CAAC;EAID;;;EAGON,aAAA,CAAAO,SAAA,CAAAC,kBAAkB,GAAzB;IACE,IAAI,CAAC,IAAI,CAACP,MAAM,CAACO,kBAAkB,EAAE;MACnC,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;;IAErD,OAAO,IAAI,CAACR,MAAM,CAACO,kBAAkB;EACvC,CAAC;EAED;;;EAGOR,aAAA,CAAAO,SAAA,CAAAG,iBAAiB,GAAxB;IACE,OAAO,IAAI,CAACT,MAAM,CAACS,iBAAiB;EACtC,CAAC;EAED;;;EAGOV,aAAA,CAAAO,SAAA,CAAAI,UAAU,GAAjB,UAAkBC,IAAY;IAC5B,OAAO,IAAIZ,aAAa,CAAC,IAAI,CAACC,MAAM,CAACY,MAAM,CAACD,IAAI,CAAC,CAAC;EACpD,CAAC;EAED;;;EAGOZ,aAAA,CAAAO,SAAA,CAAAO,WAAW,GAAlB,UAAmBC,KAAa;IAC9B,OAAO,IAAIf,aAAa,CAAC,IAAI,CAACC,MAAM,CAACa,WAAW,CAACC,KAAK,CAAC,CAAC;EAC1D,CAAC;EAED;;;EAGOf,aAAA,CAAAO,SAAA,CAAAS,SAAS,GAAhB;IACE,IAAI,IAAI,CAACf,MAAM,CAACgB,WAAW,EAAE;MAC3B,OAAOrB,OAAA,CAAAsB,OAAM,CAACC,cAAc,CAAC,IAAI,CAAClB,MAAM,CAACgB,WAAW,CAAC;;IAEvD,OAAOrB,OAAA,CAAAsB,OAAM,CAACE,aAAa,CAAC,IAAI,CAACnB,MAAM,CAACoB,UAAU,EAAE,IAAI,CAAC;EAC3D,CAAC;EACH,OAAArB,aAAC;AAAD,CAAC,CA5DD"},"metadata":{},"sourceType":"script","externalDependencies":[]}