{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar secp256k1 = __importStar(require(\"secp256k1\"));\nfunction privateKeyVerify(privateKey) {\n  return secp256k1.privateKeyVerify(privateKey);\n}\nexports.privateKeyVerify = privateKeyVerify;\nfunction publicKeyCreate(privateKey, compressed) {\n  if (compressed === void 0) {\n    compressed = true;\n  }\n  return Buffer.from(secp256k1.publicKeyCreate(privateKey, compressed));\n}\nexports.publicKeyCreate = publicKeyCreate;\nfunction publicKeyVerify(publicKey) {\n  return secp256k1.publicKeyVerify(publicKey);\n}\nexports.publicKeyVerify = publicKeyVerify;\nfunction publicKeyConvert(publicKey, compressed) {\n  if (compressed === void 0) {\n    compressed = true;\n  }\n  return Buffer.from(secp256k1.publicKeyConvert(publicKey, compressed));\n}\nexports.publicKeyConvert = publicKeyConvert;\nfunction privateKeyTweakAdd(publicKey, tweak) {\n  return Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(publicKey), tweak));\n}\nexports.privateKeyTweakAdd = privateKeyTweakAdd;\nfunction publicKeyTweakAdd(publicKey, tweak, compressed) {\n  if (compressed === void 0) {\n    compressed = true;\n  }\n  return Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(publicKey), tweak, compressed));\n}\nexports.publicKeyTweakAdd = publicKeyTweakAdd;\nfunction sign(message, privateKey) {\n  var ret = secp256k1.ecdsaSign(message, privateKey);\n  return {\n    signature: Buffer.from(ret.signature),\n    recovery: ret.recid\n  };\n}\nexports.sign = sign;\nfunction verify(message, signature, publicKey) {\n  return secp256k1.ecdsaVerify(signature, message, publicKey);\n}\nexports.verify = verify;","map":{"version":3,"names":["secp256k1","__importStar","require","privateKeyVerify","privateKey","exports","publicKeyCreate","compressed","Buffer","from","publicKeyVerify","publicKey","publicKeyConvert","privateKeyTweakAdd","tweak","publicKeyTweakAdd","sign","message","ret","ecdsaSign","signature","recovery","recid","verify","ecdsaVerify"],"sources":["../src/shims/hdkey-secp256k1v3.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;AAAA,IAAAA,SAAA,GAAAC,YAAA,CAAAC,OAAA;AAEA,SAAgBC,gBAAgBA,CAACC,UAAkB;EACjD,OAAOJ,SAAS,CAACG,gBAAgB,CAACC,UAAU,CAAC;AAC/C;AAFAC,OAAA,CAAAF,gBAAA,GAAAA,gBAAA;AAIA,SAAgBG,eAAeA,CAACF,UAAkB,EAAEG,UAAiB;EAAjB,IAAAA,UAAA;IAAAA,UAAA,OAAiB;EAAA;EACnE,OAAOC,MAAM,CAACC,IAAI,CAACT,SAAS,CAACM,eAAe,CAACF,UAAU,EAAEG,UAAU,CAAC,CAAC;AACvE;AAFAF,OAAA,CAAAC,eAAA,GAAAA,eAAA;AAIA,SAAgBI,eAAeA,CAACC,SAAiB;EAC/C,OAAOX,SAAS,CAACU,eAAe,CAACC,SAAS,CAAC;AAC7C;AAFAN,OAAA,CAAAK,eAAA,GAAAA,eAAA;AAIA,SAAgBE,gBAAgBA,CAACD,SAAiB,EAAEJ,UAAiB;EAAjB,IAAAA,UAAA;IAAAA,UAAA,OAAiB;EAAA;EACnE,OAAOC,MAAM,CAACC,IAAI,CAACT,SAAS,CAACY,gBAAgB,CAACD,SAAS,EAAEJ,UAAU,CAAC,CAAC;AACvE;AAFAF,OAAA,CAAAO,gBAAA,GAAAA,gBAAA;AAIA,SAAgBC,kBAAkBA,CAACF,SAAiB,EAAEG,KAAa;EACjE,OAAON,MAAM,CAACC,IAAI,CAChBT,SAAS,CAACa,kBAAkB,CAACL,MAAM,CAACC,IAAI,CAACE,SAAS,CAAC,EAAEG,KAAK,CAAC,CAC5D;AACH;AAJAT,OAAA,CAAAQ,kBAAA,GAAAA,kBAAA;AAMA,SAAgBE,iBAAiBA,CAC/BJ,SAAiB,EACjBG,KAAa,EACbP,UAAiB;EAAjB,IAAAA,UAAA;IAAAA,UAAA,OAAiB;EAAA;EAEjB,OAAOC,MAAM,CAACC,IAAI,CAChBT,SAAS,CAACe,iBAAiB,CAACP,MAAM,CAACC,IAAI,CAACE,SAAS,CAAC,EAAEG,KAAK,EAAEP,UAAU,CAAC,CACvE;AACH;AARAF,OAAA,CAAAU,iBAAA,GAAAA,iBAAA;AAUA,SAAgBC,IAAIA,CAClBC,OAAe,EACfb,UAAkB;EAElB,IAAMc,GAAG,GAAGlB,SAAS,CAACmB,SAAS,CAACF,OAAO,EAAEb,UAAU,CAAC;EACpD,OAAO;IAAEgB,SAAS,EAAEZ,MAAM,CAACC,IAAI,CAACS,GAAG,CAACE,SAAS,CAAC;IAAEC,QAAQ,EAAEH,GAAG,CAACI;EAAK,CAAE;AACvE;AANAjB,OAAA,CAAAW,IAAA,GAAAA,IAAA;AAQA,SAAgBO,MAAMA,CACpBN,OAAe,EACfG,SAAiB,EACjBT,SAAiB;EAEjB,OAAOX,SAAS,CAACwB,WAAW,CAACJ,SAAS,EAAEH,OAAO,EAAEN,SAAS,CAAC;AAC7D;AANAN,OAAA,CAAAkB,MAAA,GAAAA,MAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}