{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\nvar assert = _interopDefault(require('assert'));\nvar safeBuffer = _interopDefault(require('safe-buffer'));\nvar bs58check = _interopDefault(require('bs58check'));\nvar cryptoShim = require(\"../shims/hdkey-crypto\");\nvar secp256k1Shim = require(\"../shims/hdkey-secp256k1v3\");\nvar Buffer = safeBuffer.Buffer;\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8');\nvar HARDENED_OFFSET = 0x80000000;\nvar LEN = 78;\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {\n  private: 0x0488ADE4,\n  public: 0x0488B21E\n};\nfunction HDKey(versions) {\n  this.versions = versions || BITCOIN_VERSIONS;\n  this.depth = 0;\n  this.index = 0;\n  this._privateKey = null;\n  this._publicKey = null;\n  this.chainCode = null;\n  this._fingerprint = 0;\n  this.parentFingerprint = 0;\n}\nObject.defineProperty(HDKey.prototype, 'fingerprint', {\n  get: function () {\n    return this._fingerprint;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'identifier', {\n  get: function () {\n    return this._identifier;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', {\n  get: function () {\n    return this.identifier;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey;\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.');\n    assert(secp256k1Shim.privateKeyVerify(value) === true, 'Invalid private key');\n    this._privateKey = value;\n    this._publicKey = secp256k1Shim.publicKeyCreate(value, true);\n    this._identifier = hash160(this.publicKey);\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);\n  }\n});\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey;\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.');\n    assert(secp256k1Shim.publicKeyVerify(value) === true, 'Invalid public key');\n    this._publicKey = secp256k1Shim.publicKeyConvert(value, true); // force compressed point\n    this._identifier = hash160(this.publicKey);\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);\n    this._privateKey = null;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])));else return null;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey));\n  }\n});\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this;\n  }\n  var entries = path.split('/');\n  var hdkey = this;\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"');\n      return;\n    }\n    var hardened = c.length > 1 && c[c.length - 1] === \"'\";\n    var childIndex = parseInt(c, 10); // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index');\n    if (hardened) childIndex += HARDENED_OFFSET;\n    hdkey = hdkey.deriveChild(childIndex);\n  });\n  return hdkey;\n};\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET;\n  var indexBuffer = Buffer.allocUnsafe(4);\n  indexBuffer.writeUInt32BE(index, 0);\n  var data;\n  if (isHardened) {\n    // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key');\n    var pk = this.privateKey;\n    var zb = Buffer.alloc(1, 0);\n    pk = Buffer.concat([zb, pk]);\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer]);\n  } else {\n    // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer]);\n  }\n  var I = cryptoShim.createHmac('sha512', this.chainCode).update(data).digest();\n  var IL = I.slice(0, 32);\n  var IR = I.slice(32);\n  var hd = new HDKey(this.versions);\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = secp256k1Shim.privateKeyTweakAdd(this.privateKey, IL);\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1);\n    }\n    // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = secp256k1Shim.publicKeyTweakAdd(this.publicKey, IL, true);\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1);\n    }\n  }\n  hd.chainCode = IR;\n  hd.depth = this.depth + 1;\n  hd.parentFingerprint = this.fingerprint; // .readUInt32BE(0)\n  hd.index = index;\n  return hd;\n};\nHDKey.prototype.sign = function (hash) {\n  return secp256k1Shim.sign(hash, this.privateKey).signature;\n};\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1Shim.verify(hash, signature, this.publicKey);\n};\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) cryptoShim.randomBytes(this._privateKey.length).copy(this._privateKey);\n  this._privateKey = null;\n  return this;\n};\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  };\n};\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = cryptoShim.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest();\n  var IL = I.slice(0, 32);\n  var IR = I.slice(32);\n  var hdkey = new HDKey(versions);\n  hdkey.chainCode = IR;\n  hdkey.privateKey = IL;\n  return hdkey;\n};\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS;\n  var hdkey = new HDKey(versions);\n  var keyBuffer = bs58check.decode(base58key);\n  var version = keyBuffer.readUInt32BE(0);\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public');\n  hdkey.depth = keyBuffer.readUInt8(4);\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5);\n  hdkey.index = keyBuffer.readUInt32BE(9);\n  hdkey.chainCode = keyBuffer.slice(13, 45);\n  var key = keyBuffer.slice(45);\n  if (key.readUInt8(0) === 0) {\n    // private\n    assert(version === versions.private, 'Version mismatch: version does not match private');\n    hdkey.privateKey = key.slice(1); // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public');\n    hdkey.publicKey = key;\n  }\n  return hdkey;\n};\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv);\n};\nfunction serialize(hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN);\n  buffer.writeUInt32BE(version, 0);\n  buffer.writeUInt8(hdkey.depth, 4);\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000;\n  buffer.writeUInt32BE(fingerprint, 5);\n  buffer.writeUInt32BE(hdkey.index, 9);\n  hdkey.chainCode.copy(buffer, 13);\n  key.copy(buffer, 45);\n  return buffer;\n}\nfunction hash160(buf) {\n  var sha = cryptoShim.createHash('sha256').update(buf).digest();\n  return cryptoShim.createHash('ripemd160').update(sha).digest();\n}\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET;\nvar hdkey = HDKey;\nmodule.exports = hdkey;","map":{"version":3,"names":["_interopDefault","ex","assert","require","safeBuffer","bs58check","cryptoShim","secp256k1Shim","Buffer","MASTER_SECRET","from","HARDENED_OFFSET","LEN","BITCOIN_VERSIONS","private","public","HDKey","versions","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","length","privateKeyVerify","publicKeyCreate","hash160","publicKey","slice","readUInt32BE","publicKeyVerify","publicKeyConvert","encode","serialize","concat","alloc","privateKey","derive","path","entries","split","hdkey","forEach","c","i","test","hardened","childIndex","parseInt","deriveChild","isHardened","indexBuffer","allocUnsafe","writeUInt32BE","data","pk","zb","I","createHmac","update","digest","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","fingerprint","sign","hash","signature","verify","wipePrivateData","randomBytes","copy","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","decode","version","readUInt8","key","fromJSON","obj","buffer","writeUInt8","buf","sha","createHash","module","exports"],"sources":["D:/a/wallet-demo/web3-wallet-app/node_modules/ethereum-cryptography/pure/vendor/hdkey-without-crypto.js"],"sourcesContent":["'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar assert = _interopDefault(require('assert'));\nvar safeBuffer = _interopDefault(require('safe-buffer'));\nvar bs58check = _interopDefault(require('bs58check'));\n\nvar cryptoShim = require(\"../shims/hdkey-crypto\");\n\nvar secp256k1Shim = require(\"../shims/hdkey-secp256k1v3\");\n\nvar Buffer = safeBuffer.Buffer;\n\n\n\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8');\nvar HARDENED_OFFSET = 0x80000000;\nvar LEN = 78;\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E};\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS;\n  this.depth = 0;\n  this.index = 0;\n  this._privateKey = null;\n  this._publicKey = null;\n  this.chainCode = null;\n  this._fingerprint = 0;\n  this.parentFingerprint = 0;\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } });\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } });\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } });\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.');\n    assert(secp256k1Shim.privateKeyVerify(value) === true, 'Invalid private key');\n\n    this._privateKey = value;\n    this._publicKey = secp256k1Shim.publicKeyCreate(value, true);\n    this._identifier = hash160(this.publicKey);\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);\n  }\n});\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.');\n    assert(secp256k1Shim.publicKeyVerify(value) === true, 'Invalid public key');\n\n    this._publicKey = secp256k1Shim.publicKeyConvert(value, true); // force compressed point\n    this._identifier = hash160(this.publicKey);\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);\n    this._privateKey = null;\n  }\n});\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n});\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n});\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/');\n  var hdkey = this;\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"');\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\");\n    var childIndex = parseInt(c, 10); // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index');\n    if (hardened) childIndex += HARDENED_OFFSET;\n\n    hdkey = hdkey.deriveChild(childIndex);\n  });\n\n  return hdkey\n};\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET;\n  var indexBuffer = Buffer.allocUnsafe(4);\n  indexBuffer.writeUInt32BE(index, 0);\n\n  var data;\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key');\n\n    var pk = this.privateKey;\n    var zb = Buffer.alloc(1, 0);\n    pk = Buffer.concat([zb, pk]);\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer]);\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer]);\n  }\n\n  var I = cryptoShim.createHmac('sha512', this.chainCode).update(data).digest();\n  var IL = I.slice(0, 32);\n  var IR = I.slice(32);\n\n  var hd = new HDKey(this.versions);\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = secp256k1Shim.privateKeyTweakAdd(this.privateKey, IL);\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = secp256k1Shim.publicKeyTweakAdd(this.publicKey, IL, true);\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR;\n  hd.depth = this.depth + 1;\n  hd.parentFingerprint = this.fingerprint;// .readUInt32BE(0)\n  hd.index = index;\n\n  return hd\n};\n\nHDKey.prototype.sign = function (hash) {\n  return secp256k1Shim.sign(hash, this.privateKey).signature\n};\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1Shim.verify(hash, signature, this.publicKey)\n};\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) cryptoShim.randomBytes(this._privateKey.length).copy(this._privateKey);\n  this._privateKey = null;\n  return this\n};\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n};\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = cryptoShim.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest();\n  var IL = I.slice(0, 32);\n  var IR = I.slice(32);\n\n  var hdkey = new HDKey(versions);\n  hdkey.chainCode = IR;\n  hdkey.privateKey = IL;\n\n  return hdkey\n};\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS;\n  var hdkey = new HDKey(versions);\n\n  var keyBuffer = bs58check.decode(base58key);\n\n  var version = keyBuffer.readUInt32BE(0);\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public');\n\n  hdkey.depth = keyBuffer.readUInt8(4);\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5);\n  hdkey.index = keyBuffer.readUInt32BE(9);\n  hdkey.chainCode = keyBuffer.slice(13, 45);\n\n  var key = keyBuffer.slice(45);\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private');\n    hdkey.privateKey = key.slice(1); // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public');\n    hdkey.publicKey = key;\n  }\n\n  return hdkey\n};\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n};\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN);\n\n  buffer.writeUInt32BE(version, 0);\n  buffer.writeUInt8(hdkey.depth, 4);\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000;\n  buffer.writeUInt32BE(fingerprint, 5);\n  buffer.writeUInt32BE(hdkey.index, 9);\n\n  hdkey.chainCode.copy(buffer, 13);\n  key.copy(buffer, 45);\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = cryptoShim.createHash('sha256').update(buf).digest();\n  return cryptoShim.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET;\nvar hdkey = HDKey;\n\nmodule.exports = hdkey;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}