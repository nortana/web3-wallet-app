{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst index_1 = __importDefault(require(\"./index\"));\nconst hdkey_1 = require(\"ethereum-cryptography/hdkey\");\nclass EthereumHDKey {\n  constructor(_hdkey) {\n    this._hdkey = _hdkey;\n  }\n  /**\n   * Creates an instance based on a seed.\n   *\n   * For the seed we suggest to use [bip39](https://npmjs.org/package/bip39) to\n   * create one from a BIP39 mnemonic.\n   */\n  static fromMasterSeed(seedBuffer) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromMasterSeed(seedBuffer));\n  }\n  /**\n   * Create an instance based on a BIP32 extended private or public key.\n   */\n  static fromExtendedKey(base58Key) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromExtendedKey(base58Key));\n  }\n  /**\n   * Returns a BIP32 extended private key (xprv)\n   */\n  privateExtendedKey() {\n    if (!this._hdkey.privateExtendedKey) {\n      throw new Error('This is a public key only wallet');\n    }\n    return this._hdkey.privateExtendedKey;\n  }\n  /**\n   * Return a BIP32 extended public key (xpub)\n   */\n  publicExtendedKey() {\n    return this._hdkey.publicExtendedKey;\n  }\n  /**\n   * Derives a node based on a path (e.g. m/44'/0'/0/1)\n   */\n  derivePath(path) {\n    return new EthereumHDKey(this._hdkey.derive(path));\n  }\n  /**\n   * Derive a node based on a child index\n   */\n  deriveChild(index) {\n    return new EthereumHDKey(this._hdkey.deriveChild(index));\n  }\n  /**\n   * Return a `Wallet` instance as seen above\n   */\n  getWallet() {\n    if (this._hdkey._privateKey) {\n      return index_1.default.fromPrivateKey(this._hdkey._privateKey);\n    }\n    return index_1.default.fromPublicKey(this._hdkey._publicKey, true);\n  }\n}\nexports.default = EthereumHDKey;","map":{"version":3,"names":["index_1","__importDefault","require","hdkey_1","EthereumHDKey","constructor","_hdkey","fromMasterSeed","seedBuffer","HDKey","fromExtendedKey","base58Key","privateExtendedKey","Error","publicExtendedKey","derivePath","path","derive","deriveChild","index","getWallet","_privateKey","default","fromPrivateKey","fromPublicKey","_publicKey","exports"],"sources":["../src/hdkey.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AAEA,MAAqBE,aAAa;EAkBhCC,YAA6BC,MAAY;IAAZ,KAAAA,MAAM,GAANA,MAAM;EAAS;EAjB5C;;;;;;EAMO,OAAOC,cAAcA,CAACC,UAAkB;IAC7C,OAAO,IAAIJ,aAAa,CAACD,OAAA,CAAAM,KAAK,CAACF,cAAc,CAACC,UAAU,CAAC,CAAC;EAC5D;EAEA;;;EAGO,OAAOE,eAAeA,CAACC,SAAiB;IAC7C,OAAO,IAAIP,aAAa,CAACD,OAAA,CAAAM,KAAK,CAACC,eAAe,CAACC,SAAS,CAAC,CAAC;EAC5D;EAIA;;;EAGOC,kBAAkBA,CAAA;IACvB,IAAI,CAAC,IAAI,CAACN,MAAM,CAACM,kBAAkB,EAAE;MACnC,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;;IAErD,OAAO,IAAI,CAACP,MAAM,CAACM,kBAAkB;EACvC;EAEA;;;EAGOE,iBAAiBA,CAAA;IACtB,OAAO,IAAI,CAACR,MAAM,CAACQ,iBAAiB;EACtC;EAEA;;;EAGOC,UAAUA,CAACC,IAAY;IAC5B,OAAO,IAAIZ,aAAa,CAAC,IAAI,CAACE,MAAM,CAACW,MAAM,CAACD,IAAI,CAAC,CAAC;EACpD;EAEA;;;EAGOE,WAAWA,CAACC,KAAa;IAC9B,OAAO,IAAIf,aAAa,CAAC,IAAI,CAACE,MAAM,CAACY,WAAW,CAACC,KAAK,CAAC,CAAC;EAC1D;EAEA;;;EAGOC,SAASA,CAAA;IACd,IAAI,IAAI,CAACd,MAAM,CAACe,WAAW,EAAE;MAC3B,OAAOrB,OAAA,CAAAsB,OAAM,CAACC,cAAc,CAAC,IAAI,CAACjB,MAAM,CAACe,WAAW,CAAC;;IAEvD,OAAOrB,OAAA,CAAAsB,OAAM,CAACE,aAAa,CAAC,IAAI,CAAClB,MAAM,CAACmB,UAAU,EAAE,IAAI,CAAC;EAC3D;;AA3DFC,OAAA,CAAAJ,OAAA,GAAAlB,aAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}